#!/usr/bin/env bash
set -e

DONT_CLEAN=${DONT_CLEAN:-false}

header() {
  local text="$1"
  local width=53  # Adjust this for desired total width
  local padding=$(( (width - ${#text}) / 2 ))  # Calculate padding for centering

  printf '%*s\n' "$width" | tr ' ' '-'
  printf '%*s%s%*s\n' "$padding" "" "$text" "$padding" ""
  printf '%*s\n' "$width" | tr ' ' '-'
}

cleanupTest() {
  header "CLEANUP"
  echo "Cleaning up before exit..."
  if k3d cluster list $CLUSTER_NAME 2> /dev/null; then
    k3d cluster delete $CLUSTER_NAME
  fi
}

onExit() {
  if [[ "$?" -eq 0 ]] || [ "$DONT_CLEAN" == true ]; then
    exit 0
  fi

  cleanupTest
}
trap onExit EXIT

source "$(dirname "$0")/version"
source "$(dirname "$0")/k3s-version"

cd "$(dirname "$0")/.."

# Setup CI specific Vars
export CLUSTER_NAME='e2e-ci-prometheus-federator'
export E2E_CI=true
export K3S_VERSION=${K3S_VERSION:-$K3S_MIN_VERSION_TAG}

if k3d cluster list $CLUSTER_NAME 2> /dev/null; then
  echo "The test cluster '$CLUSTER_NAME' already exists for some reason"
  echo "Either manually delete the tests cluster, or pick a new cluser name to use."
  exit 0
fi

set +e
KUBE_PROXY_PIDS=$(ps aux|grep -v grep|grep kubectl|grep proxy)
set -e
if [ "$KUBE_PROXY_PIDS" != "" ]; then
  echo "$KUBE_PROXY_PIDS" | while IFS= read -r kubeProxy; do
    kill -9 "$(echo "$kubeProxy" | awk '{print $2}')"
  done
fi

header "Starting E2E tests for PromFed@$TAG"

# Pre build images
header "Building PromFed images for testing"
REPO=${REPO} TAG=${TAG} make build;
REPO=${REPO} TAG=${TAG} make package;
header "Image built ${REPO}/prometheus-federator:${TAG}"
export TAG

# Install k3d
which k3d > /dev/null  2>&1
if [ "$?" -eq 1 ]; then
  echo "Found k3d not installed setting up now..."
  ./.github/workflows/e2e/scripts/install-k3d.sh
fi

# Setup k3d cluster
header "Setting up E2E cluster"
./.github/workflows/e2e/scripts/setup-cluster.sh

# Import Images Into k3d
header "Importing images to k3d"
k3d image import ${REPO}/prometheus-federator:${TAG} -c $CLUSTER_NAME;

# Setup kubectl context
kubectl config use-context "k3d-$CLUSTER_NAME";

# Install Rancher Monitoring
header "Installing Rancher Monitoring"
./.github/workflows/e2e/scripts/install-monitoring.sh;

# Check if Rancher Monitoring is up
header "Verify Rancher Monitoring UP"
./.github/workflows/e2e/scripts/validate-monitoring.sh;

# Install Prometheus Federator
header "Installing Prom Fed"
./.github/workflows/e2e/scripts/install-federator.sh;

# Check if Prometheus Federator is up
header "Verifying Prom Fed is UP"
./.github/workflows/e2e/scripts/validate-federator.sh;

# Check if Project Registration Namespace is auto-created on namespace detection
./.github/workflows/e2e/scripts/create-project-namespace.sh;

# Create Project Monitoring Stack via ProjectHelmChart CR
header "Create Project Monitoring Stack via ProjectHelmChart CR"
DEFAULT_SLEEP_TIMEOUT_SECONDS=20 KUBECTL_WAIT_TIMEOUT=480s ./.github/workflows/e2e/scripts/create-projecthelmchart.sh;

# Check if the Project Prometheus Stack is up
header "Check if the Project Prometheus Stack is up"
./.github/workflows/e2e/scripts/validate-project-monitoring.sh;

# Validate Project Prometheus Targets
header "Validate Project Prometheus Targets"
KUBECTL_WAIT_TIMEOUT=480s ./.github/workflows/e2e/scripts/validate-project-prometheus-targets.sh;

# Validate Project Grafana Datasources
header "Validate Project Grafana Datasources"
./.github/workflows/e2e/scripts/validate-project-grafana-datasource.sh;

# Validate Project Grafana Dashboards
header "Validate Project Grafana Dashboards"
KUBECTL_WAIT_TIMEOUT=480s ./.github/workflows/e2e/scripts/validate-project-grafana-dashboards.sh;

# Validate Project Prometheus Alerts
header "Validate Project Prometheus Alerts"
./.github/workflows/e2e/scripts/validate-project-prometheus-alerts.sh;

# Validate Project Alertmanager
header "Validate Project Alertmanager"
./.github/workflows/e2e/scripts/validate-project-alertmanager.sh;

### ALL LOGIC ABOVE THIS
if [ "$DONT_CLEAN" == true ]; then
  header "Local e2e testing was a SUCCESS"
  header "Exiting early, to leave cluster for testing"
  exit;
fi

# Delete Project Prometheus Stack
header "Delete Project Prometheus Stack"
./.github/workflows/e2e/scripts/delete-projecthelmchart.sh;

# Uninstall Prometheus Federator
header "Uninstall Prometheus Federator"
./.github/workflows/e2e/scripts/uninstall-federator.sh;

header "Local e2e testing was a SUCCESS"
cleanupTest