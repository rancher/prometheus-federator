name : Publish images, charts and binaries

on:
  push:
    tags:
      - "v*"

env:
  GHCR_REGISTRY: ghcr.io
  PUBLIC_REGISTRY: docker.io
  REPO: rancher
  IMAGE_NAME: 'prometheus-federator'
  YQ_VERSION: v4.44.3

jobs:
  ci:
    uses: ./.github/workflows/ci.yaml
  integration:
    uses: ./.github/workflows/integration.yaml
  e2e:
    uses : ./.github/workflows/prom-fed-e2e-ci.yaml
  goreleaser:
    name: Build go binaries and helm chart
    runs-on: ${{ github.repository == 'rancher/prometheus-federator' && format('runs-on,image=ubuntu22-full-x64,runner=4cpu-linux-x64,run-id={0}', github.run_id) || 'ubuntu-latest' }}
    needs: [
      ci,
      integration,
    ]
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      GORELEASER_CURRENT_TAG: ${{ github.ref_name }}
    steps:
      - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4
        with:
          fetch-depth: 0
      - run: git fetch --force --tags
      - name : setup Go
        uses : actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5
        with:
          go-version: 1.22
      - name: Check if yq is installed
        id: check_yq
        run: |
          if ! command -v yq &> /dev/null; then
            echo "yq not found, installing..."
            echo "::set-output name=install_yq::true"
          else
            echo "yq is already installed"
            echo "::set-output name=install_yq::false"
          fi
      - name : Install YQ
        if: steps.check_yq.outputs.install_yq == 'true'
        run: |
          sudo wget https://github.com/mikefarah/yq/releases/download/${YQ_VERSION}/yq_linux_amd64 -O /usr/bin/yq && sudo chmod +x /usr/bin/yq;
      - uses: azure/setup-kubectl@776406bce94f63e41d621b960d78ee25c8b76ede # v4
      - name : Install helm
        uses: azure/setup-helm@1a275c3b69536ee54be43f2070a358922e12c8d4 # v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Prepare helm charts (needed for build)
        run: |
          GIT_TAG=${{ github.ref_name }} BUILD_TARGET=prometheus-federator make package-helm && echo "pf: release chart prepared"
          BUILD_TARGET=prometheus-federator make build-chart && echo "pf: embedded project-monitoring chart prepared"
      - uses: goreleaser/goreleaser-action@e435ccd777264be153ace6237001ef4d979d3a7a # v6
        with:
          distribution: goreleaser
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GORELEASER_CURRENT_TAG: ${{ github.ref_name }}
  push-dev-images:
    name : Build and push helm-locker & Helm-Project-Operator images
    runs-on: ${{ github.repository == 'rancher/prometheus-federator' && format('runs-on,image=ubuntu22-full-x64,runner=4cpu-linux-x64,run-id={0}', github.run_id) || 'ubuntu-latest' }}
    needs: [
      ci,
      integration,
    ]
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    steps:
      - name : Checkout repository
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3
      - name: Log in to the Container registry
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef # v3
        with:
          registry: ${{ env.GHCR_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata (tags, labels) for Helm-Project-Operator image
        id: meta-hpo
        uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f # v5
        with:
          images: ${{ env.GHCR_REGISTRY }}/${{ env.REPO }}/${{ env.IMAGE_NAME }}/helm-project-operator
      - name: Build Helm-Project-Operator image
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6
        with:
          context: .
          file: ./package/Dockerfile-helm-project-operator
          push: true
          tags: ${{ steps.meta-hpo.outputs.tags }}
          labels: ${{ steps.meta-hpo.outputs.labels }}
          platforms: linux/amd64,linux/arm64
  publish-images:
    name: Publish prometheus-federator image
    runs-on: ubuntu-latest
    continue-on-error: true
    needs: [
      ci,
      integration,
      e2e,
    ]
    permissions:
      contents : read
      id-token: write
    steps:
      - name : Checkout repository
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4
      - name: Prepare helm charts (needed for build)
        run: |
          GIT_TAG=${{ github.ref_name }} BUILD_TARGET=prometheus-federator make package-helm && echo "pf: release chart prepared"
          BUILD_TARGET=prometheus-federator make build-chart && echo "pf: embedded project-monitoring chart prepared"
      - name: "Read Secrets"
        if: github.repository == 'rancher/prometheus-federator'
        uses: rancher-eio/read-vault-secrets@main
        with:
          secrets: |
            secret/data/github/repo/${{ github.repository }}/rancher-prime-stg-registry/credentials registry |  PRIME_STG_REGISTRY;
            secret/data/github/repo/${{ github.repository }}/rancher-prime-stg-registry/credentials username |  PRIME_STG_REGISTRY_USERNAME;
            secret/data/github/repo/${{ github.repository }}/rancher-prime-stg-registry/credentials password |  PRIME_STG_REGISTRY_PASSWORD;
            secret/data/github/repo/${{ github.repository }}/dockerhub/rancher/credentials username | DOCKER_USERNAME ;
            secret/data/github/repo/${{ github.repository }}/dockerhub/rancher/credentials password | DOCKER_PASSWORD
        # This encapsulates: login, qemu, build/push
      - name: Build and push prometheus-federator image (dockerhub and prime stg)
        uses: rancher/ecm-distro-tools/actions/publish-image@master
        with:
          image: ${{ env.IMAGE_NAME }}
          tag: ${{ github.ref_name }}

          public-registry: ${{ env.PUBLIC_REGISTRY }}
          public-repo: ${{ env.REPO }}
          public-username: ${{ env.DOCKER_USERNAME || vars.DOCKER_USERNAME || github.repository_owner }}
          public-password: ${{ env.DOCKER_PASSWORD || secrets.DOCKER_PASSWORD }}

          push-to-prime: ${{ github.repository == 'rancher/prometheus-federator' }}
          prime-registry: ${{ env.PRIME_STG_REGISTRY }}
          prime-repo: ${{ env.REPO }}
          prime-username: ${{ env.PRIME_STG_REGISTRY_USERNAME }}
          prime-password: ${{ env.PRIME_STG_REGISTRY_PASSWORD }}
          identity-registry: ${{ env.PRIME_REGISTRY }}
